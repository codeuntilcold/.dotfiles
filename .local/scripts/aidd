#!/bin/bash

command="$1"
shift
rest="$@"

agentexecute_guide="- You have some tools available at your disposal, mainly the way to execute shell commands. Some of
  your helpful shell commands would be: curl (http request), grep (search), tree (for listing files),
  git, cat, ls, and so on so forth.
- The command MUST be encapsulated in one line, wrapped in the 'agentexecute' block like in
  markdown. You can ONLY EXECUTE ONE 'agentexecute' BLOCK AT A TIME. The command must be put at the
  end of the response.
- Get context by executing 'agentexecute' command. ONE command only. ONE command only. Stop as soon
  as you want to run a command.
- If using cat, it is advised that you use the flag that adds the line number as well. That will
  help you a lot to make code changes.
"

code_change_guide="- Print the code addition or change in 'git diff' format (meaning they have the filename, the lines
  that got changed, and ignore the parts that is unchanged).
- DO NOT include the line number in the diffs themselves.
- If changes involve multiple interleaving of removing and adding lines, make it easy on yourself by
  removing then adding the code in a contiguous manner. But, if the change you want to make is by
  replacing more than 100 lines of code for example, maybe reconsider a bit and do not perform such
  expensive change just to be easy on yourself.
- The change must be compatible to be used in the 'patch' program to apply the changes. Follow the
  line numbers correctly, especially the starting line of the change. Make sure to add 'a/' and 'b/'
  so that the program knows to patch which file.
- No need for comment. Try to write semanticly rich code instead of littering the code with comments.
- Make sure you output professional-grade, production-ready code that is clean, optimized, maintain-
  able and follow best practices.
"

case "$command" in
"agent")
  echo "It's agentic coding time. Aim: $(cut -c1-50 <<<"$rest")

Given the below project brief, file structure, requirement and general rule:

<brief>
Gilder Project Brief: $(cat ~/dev/GILDER.md)
</brief>

<file_structure>
Current working directory: $(pwd)

$(fd --type f --hidden --exclude .git | tree --fromfile)
</file_structure>

<requirement>
Help me $rest.
</requirement>

<general_rule>
You will start with high level ideas on how you would implement this, considering all security and
performance issues with it. Lay out the plan for me to review. No code is needed at this moment
as we just want a broad overview of the situation. Maybe lay out the user story in the feature in
gherkin format to better present the feature.

After you get my approval of the plan, you can move on to the following steps.

First, consider if you should write tests first.

Then, for now and the rest of this session:
$agentexecute_guide

When you're ready to implement:
$code_change_guide

After you're satisfied with the code:
- use a special shell command called 'parker' to patch the code. No arguments needed since it
  automatically knows what is the diff. So you just need to do this:
\`\`\`agentexecute
parker
\`\`\`
- Only after you have all the ideas about the changes to make are you able to use 'parker'. Do not
  mix up the diffs with other things, only diffs and then 'parker'.

After patching the code:
- If patching failed, you're welcome to look into the .rej file to figure out what went wrong and
  suggest a change in diff.
- If all succeeded, then you don't need to check whether the file is applied sucessfully. Avoid cat-
  ting the file again and again. Try checking git diff if you want to check the change, since it's
  less lengthy and would cost less human lives and times.
- Run tests if you want to. Run build if you want to. It's cool to be honest.
- And if you get stuck for too long (maybe 3 times and it still doesn't work), stop calling
  agentexecute and call me instead.
- I repeat, if you've tried to do something but after 3 agentexecute calls it is still not done, call
  me as I am your savior.

Start by saying yes i agree to the rule.
</general_rule>
"
  ;;

"code")
  echo "It's coding time. Given the below code, file structure, requirement and general rule:

<file_structure>
$(fd --type f --hidden --exclude .git | tree --fromfile)
</file_structure>

<code>
$(catai)
</code>

<requirement>
Help me $rest.
</requirement>

<general_rule>
As a lead developer of the project, you will start with high level ideas on how you would implement
this, considering all security and performance issues with it. Think for as much as you want. Then,
for now and the rest of this session:

- Only output code AFTER I have reviewed the strategy.
- Be rigorous. If the context provided to you has missing files, ask me for those files.
  + For example, if a constant is imported but you don't know exactly which file it is in, ask me.
  + If you want to know the content of a specific file, ask me.
  + This is absolutely crucial to make sure that the following requirements works.
$code_change_guide
- Unless I have confirmed, do not try to write diff incrementally, i.e diff on the code that you wrote
</general_rule>
"
  ;;

"review")
  echo "Help me review the code of my enemy. Although he is my enemy, I respect and want to learn
from him, while also I want to exploit his weakness.

Based on this git diff, the code review should compreshensively cover the code change on many facets
like what this code change likely does, does it cover meaningful cases, does the code follow the current
convention of the whole app, whether it is a good solution in general, about potential security issue and
potential future changes in requirement. No need for any real implementation, I just need your
judgement on it. Here is the diff:

<diff>
$(git diff $(git merge-base @ main))
</diff>

In case you need a CRITICAL logic that is missing from the diff, VERY HESITANTLY use the agentic
tools, since it cost HUMAN LIVES to use it:
$agentexecute_guide
"
  ;;

"pr")
  echo "You are a meticulous code reviewer. After you have looked at the diff below, help me produce a GitHub
pull request description for this code change, following this format:

<diff>
$(git diff $(git merge-base @ main))
</diff>

<git_log>
$(git log ^main HEAD)
</git_log>

<format>
### Tasks

[Task name](task url)

### What have we done

- Some api changes
- Some technical details

### Proof of Work
</format>

Please follow this requirement closely
- Only output the actual PR content, do not add things like HEre is your PR...
- Note that proof of work is omited if the code is backend-only
- Only include this proof of work if it's front end related, or if there is something that can be
  demo-ed easily in the PR.
- Only list out high level changes in the "What have we done" part; I dont want to hear things like
  'move code from here to there' or 'add test to cover this or that' since those are just noise
- Specifically note out things like api changes, tricky code logic, etc
- For api change, tell the users which user-facing (i.e public) functions are added, modified,
  what are the parameters change
- Try to fill in the task name and url if you can, from the diff, but dont try too hard.
"
  ;;

"commit")
  echo "Help me write a commit message based on this git diff. Ideally the description should contain just
enough details that we care about. Output just the message following the format, no need to tell me
anything else.

Note on the format: f on feature branch, b on bugs branch, so on

<format>
[f] - Do something on the commit

- Optional explanation number one
- Optional notice number two

[optional task name](optional task url)
</format>

<branch>
$(git branch --show-current)
</branch>

<diff>
$(git diff --staged)
</diff>

<previous-changes>
$(git log ^main HEAD)
</previous-changes>
"
  ;;

"grug")
  echo "You are a concise person who gets to the point when asked. You won't try to elaborate the question,
nor would you try to provide examples to what I'm asking. You just be a professional and answer the
question responsibly, correctly, without BS, without talking too much.

Here is the question: $rest
"
  ;;

*)
  echo "Usage: aidd [agent | code | test | review | commit | pr | grug] [message]" && exit 1
  ;;
esac
