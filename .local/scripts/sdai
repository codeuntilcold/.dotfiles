#!/usr/bin/env bash

set -o pipefail
# set -x # for debugging
shopt -s nullglob

BASE_URL="https://admin.skydeck.ai/api/v1"
CURRENT_RESPONSE_FILE="/tmp/sdai-conv-000000.md"
CACHE_FILE="/tmp/sdai-cache.txt"
CACHE_TIMEOUT=300 # 5 minutes

COOKIE_FILE="$HOME/.sdai/cookies"
COUNT_FILE="$HOME/.sdai/count.txt"
HEADER_REFERER="Referer: https://eastagile.skydeck.ai/"

BG='\e[1;32m'
CLR='\e[0m'

declare -A MODELS
MODELS["cld-35-haiku"]=5171
MODELS["cld-35-sonnet"]=5101
MODELS["cld-37-sonnet"]=6188
MODELS["gem-2-flash"]=6182
MODELS["gem-2-flash-lite"]=6215
MODELS["gem-2-flash-lite-thinking"]=6216
MODELS["gem-2-pro"]=6137
MODELS["gem-25-pro"]=6324
MODELS["gpt-4o"]=4094
MODELS["gpt-4o-mini"]=4430
MODELS["gpt-o1"]=5728
MODELS["gpt-o3-mini"]=6006
MODELS["deep-r1"]=5971

# global context
STREAMING="false"
CONVERSATION_ID=""
ASSI_MESSAGE_ID=""
MODEL_NAME=""
MODEL_ID=""
MESSAGE=""

###
# LOCAL OPS
###

spinner() {
  local spinstr='⠋⠙⠹⠸⠼⠴⠦⠧⠇⠏'
  for ((i = 0; i < 100; i++)); do
    printf " %s " "${spinstr:0:1}" && sleep 0.05 && printf "\r"
    spinstr=${spinstr#?}${spinstr:0:1}
  done
}

pick_model() {
  local selected=$(
    [[ -z $1 ]] &&
      (for key in ${!MODELS[@]}; do echo $key; done | fzf --prompt="Select a model: ") ||
      (for key in ${!MODELS[@]}; do echo $key; done | fzf --filter $1 | head -n 1)
  )
  [[ -z "$selected" ]] && echo "Model selection cancelled" && return
  set_model $selected
}

set_model() {
  MODEL_NAME=$1 && MODEL_ID=${MODELS[$1]}
}

invalidate_cache() {
  [[ -f "$CACHE_FILE" ]] && rm $CACHE_FILE
}

increment_message_count() {
  local current=$(cat $COUNT_FILE)
  echo $((current + 1)) >$COUNT_FILE
}

dash() {
  printf "$BG%$(tput cols)s$CLR\n" | tr ' ' '-'
}

get_access_token() {
  grep "_access" $COOKIE_FILE | cut -f7
}

abort() {
  echo "$1" && exit 1
}

###
# NETWORK CALLS
###

refresh() {
  local exp=$(get_access_token | jwt | jq '.exp')

  [[ "$(date +%s)" -gt "$exp" ]] &&
    curl -s -X POST -o /dev/null "$BASE_URL/authentication/token/refresh/" \
      -H "$HEADER_REFERER" --cookie "$COOKIE_FILE" --cookie-jar "$COOKIE_FILE"
}

call() {
  refresh
  curl -s --cookie "$COOKIE_FILE" -H "Content-Type: application/json" -H "$HEADER_REFERER" "$@"
}

call_form() {
  refresh
  curl -s --cookie "$COOKIE_FILE" -H "Content-Type: multipart/form-data" -H "$HEADER_REFERER" "$@"
}

delete_conversation() {
  call "$BASE_URL/conversations/$CONVERSATION_ID" -o /dev/null -X DELETE &
}

patch_conversation() {
  call "$BASE_URL/conversations/$CONVERSATION_ID" -o /dev/null -X PATCH -d '{ "name": "'"$1"'" }'
  notify-send "Changed conversation name to $1" -t 3000
}

post_user_message() {
  call_form "$BASE_URL/conversations/chat_v2/" --form-string "message=$MESSAGE" \
    -F "model_id=$MODEL_ID" -F "conversation_id=$CONVERSATION_ID" -F "regenerate_message_id=-1" $@
}

get_response_stream() {
  increment_message_count

  STREAMING="true"
  call "$BASE_URL/conversations/streaming/" --data '{"message_id": '"$ASSI_MESSAGE_ID"' }' --no-buffer |
    tee $CURRENT_RESPONSE_FILE

  STREAMING="false"
}

stop_response_stream() {
  [ "$STREAMING" == "false" ] && return

  call "$BASE_URL/conversations/messages/$ASSI_MESSAGE_ID/stop-streaming/" -o /dev/null -d "{}"
  printf "\n$BG[Interrupted]$CLR"
}

get_conversations() {
  [[ ! -f $CACHE_FILE ]] && call "$BASE_URL/conversations/?sort_by=created" | tee "$CACHE_FILE"

  local cur=$(date +%s)
  local mod=$([[ $(uname) = 'Linux' ]] && stat --format=%Y $CACHE_FILE || stat -f %m $CACHE_FILE)
  if [[ $((cur - mod)) -lt $CACHE_TIMEOUT ]]; then
    cat "$CACHE_FILE"
  else
    call "$BASE_URL/conversations/?sort_by=created" | tee "$CACHE_FILE"
  fi
}

pick_conversation_id() {
  get_conversations | jq -c '.results[] | { id, name, size }' | fzf | jq '.id'
}

count_dollars_spent() {
  local last_monday=$([[ $(uname) = 'Linux' ]] && date -d last-sun +%s || date -v -sun -u +%s)

  (
    call "$BASE_URL/conversations/?sort_by=created" | jq -c '.results[] | { id, created }' &
    call "$BASE_URL/conversations/?sort_by=created&page=2" | jq -c '.results[] | { id, created }' &
    wait
  ) |
    while IFS= read -r conv; do
      local created=$(echo "$conv" | jq -r '.created' | sed 's/\.[0-9]*Z$//') # trim off milliseconds
      local id=$(echo "$conv" | jq -r '.id')

      local created=$(
        [[ $(uname) = 'Linux' ]] &&
          date --date="$created" +%s || date -u -j -f %Y-%m-%dT%H:%M:%S +%s "$created"
      )
      [[ $created -gt "$last_monday" ]] && echo $id
    done |
    (
      while IFS= read -r id; do
        call "$BASE_URL/conversations/$id/cost" | jq -r '.conversation_total_usage_cost' &
      done
      wait
    ) |
    LC_NUMERIC=C awk '{sum += $1} END {print sum}'
}

get_conversation_history() {
  call "$BASE_URL/conversations/$CONVERSATION_ID" |
    jq -r "[.data.messages[].content] | join(\"\\n$(dash)\\n\")"
}

###
# MAIN OPS
###

start_chat_session() {
  echo "SkyDeck.ai with $MODEL_NAME"

  while true; do
    local queryfile="/tmp/sdai-query-$CONVERSATION_ID.md"

    dash

    local aicommand=$(
      tail -n 4 $CURRENT_RESPONSE_FILE | sed -n '/^```agentexecute$/,/^```$/p' | sed '/^```/d'
    )
    if [[ -n $CONVERSATION_ID && -n "$aicommand" ]]; then
      echo ">>>>>>>>> Executing $aicommand"
      spinner &
      spinner_id=$!

      sleep 3

      kill $spinner_id 2>/dev/null
      wait $! 2>/dev/null
      echo -ne '\r   \r'

      eval "$aicommand" >&/tmp/heyyy
      MESSAGE=$(cat /tmp/heyyy)
      [[ -z "$MESSAGE" ]] && MESSAGE="empty response"
    else
      # use a local version of `gum` to map enter to new line, ctrl+d to submit
      MESSAGE=$(gum write --char-limit=0 --width=0 --height=0 --no-show-help) || return
    fi

    if [[ -z "$MESSAGE" ]]; then
      nvim "$queryfile"
      MESSAGE=$(cat "$queryfile")
    else
      echo "$MESSAGE"
    fi

    # use aidd prompt
    if [[ "$MESSAGE" =~ ^/u ]]; then
      aidd ${MESSAGE#* } >"$queryfile"
      nvim "$queryfile"
      MESSAGE=$(cat "$queryfile")
    fi

    # parker
    if [[ "$MESSAGE" =~ ^/p ]]; then
      parker
      continue
    fi

    # model
    if [[ "$MESSAGE" =~ ^/m ]]; then
      read -r _ model <<<"$MESSAGE"
      pick_model "$model"
      continue
    fi

    # yank
    if [[ "$MESSAGE" =~ ^/y ]]; then
      read -r _ block <<<"$MESSAGE"
      if [[ -z "$block" ]]; then
        cat $CURRENT_RESPONSE_FILE
      else
        cat $CURRENT_RESPONSE_FILE | sed -n '/^```'"$block"'.*$/,/^```$/p' | sed '/^```/d'
      fi | {
        [[ $(uname) = 'Darwin' ]] && pbcopy || xclip -sel c
      }
      continue
    fi

    if [[ "$MESSAGE" = "/colab" ]]; then
      call "$BASE_URL/conversations/collaboration/stop" --data '{"conversation_id":'"$CONVERSATION_ID"'}' >/dev/null
      echo https://eastagile.skydeck.ai/conversation/$(
        call "$BASE_URL/conversations/collaboration/start" --data '{"conversation_id":'"$CONVERSATION_ID"'}' |
          jq -r '.data.collaboration_slug'
      )
      continue
    fi

    if [[ "$MESSAGE" = "/snap" ]]; then
      call "$BASE_URL/conversations/$CONVERSATION_ID/create_snapshot" --data '{"anonymize":"false"}' | jq -r '.url'
      continue
    fi

    if [[ "$MESSAGE" = "/clear" ]]; then
      clear
      continue
    fi

    send_and_recv_cancellable
  done
}

send_and_recv_cancellable() {
  spinner &
  spinner_id=$!

  read CONVERSATION_ID ASSI_MESSAGE_ID < <(
    post_user_message | jq -r '[.data.conversation_id, .data.messages[-1].id] | join(" ")'
  )

  kill $spinner_id 2>/dev/null
  wait $! 2>/dev/null
  echo -ne '\r   \r'

  trap stop_response_stream SIGINT

  printf "$BG($MODEL_NAME)$CLR\n"
  get_response_stream
  echo

  trap - SIGINT
}

usage() {
  echo "Usage: $(basename $0) [chat | continue | delete | patch | query-models | count-conv | read-cont]"
  exit 1
}

main() {
  [[ "$#" -lt 1 ]] && usage

  case "$1" in
  c | chat)
    start_chat_session
    ;;
  pc | pick-chat)
    pick_model
    start_chat_session
    ;;
  cont | continue)
    CONVERSATION_ID=$(pick_conversation_id) || abort "No conversation selected"
    start_chat_session
    ;;
  d | delete)
    CONVERSATION_ID=$(pick_conversation_id) || abort "No conversation selected"
    delete_conversation
    invalidate_cache
    ;;
  p | patch)
    CONVERSATION_ID=$(pick_conversation_id) || abort "No conversation selected"
    read -p "Enter new name: " name
    patch_conversation $name &
    ;;
  read-cont)
    CONVERSATION_ID=$(pick_conversation_id) || abort "No conversation selected"
    get_conversation_history
    start_chat_session
    ;;
  query-models)
    call "$BASE_URL/models/" |
      jq -r '.[] | [ .id, .name, .context_window ] | @tsv' | column -t -s $'\t' | sort -u -k2
    ;;
  count-conv)
    cat $COUNT_FILE
    ;;
  count-dollars)
    count_dollars_spent
    ;;
  *)
    MESSAGE=$(aidd "$@") || abort "No such aidd template: $1"
    send_and_recv_cancellable
    ;;
  esac
}

pick_model $([ -t 0 ] && echo "37-sonnet" || echo "gem-2-flash-lite-thinking")

main "$@"
