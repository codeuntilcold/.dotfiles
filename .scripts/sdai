#!/bin/bash

BASE_URL="https://admin.skydeck.ai/api/v1"
CURRENT_RESPONSE_FILE="/tmp/sdai-conv-000000.md"
CACHE_FILE="/tmp/sdai-cache.txt"
CACHE_TIMEOUT=300 # 5 minutes

COOKIE_FILE="$HOME/.sdai/cookies"
HEADER_REFERER="Referer: https://eastagile.skydeck.ai/"

BG='\e[1;32m'
CLR='\e[0m'

MODELS_NAMES=(
  "claude" "gpt4o" "gpt4o-mini" "gem-flash" "gem-pro"
)
MODELS_IDS=(
  5101 4094 4430 5103 4871
)

streaming="false"
conversation_id=""
assistant_message_id=""

set -o vi

set_model() {
  model_name=${MODELS_NAMES[$1]}
  model_id=${MODELS_IDS[$1]}
}

# if interactive then use mini, else use claude to be more dependable
set_model $([ -t 0 ] && echo 2 || echo 3)

spinner() {
  local rest=""
  local spinstr='⠋⠙⠹⠸⠼⠴⠦⠧⠇⠏'

  while true; do
    printf " %s " "${spinstr:0:1}"
    rest=${spinstr#?}
    spinstr=$rest${spinstr:0:1}
    sleep 0.1
    printf "\r"
  done
}

pick_model() {
  local selected=$(
    [ ! -z $1 ] &&
      (printf '%s\n' "${MODELS_NAMES[@]}" | fzf --filter $1 | head -n 1) ||
      (printf '%s\n' "${MODELS_NAMES[@]}" | fzf --prompt="Select a model: ")
  )

  if [ ! -n "$selected" ]; then
    echo "Model selection cancelled"
    return
  fi

  for i in "${!MODELS_NAMES[@]}"; do
    if [[ "${MODELS_NAMES[$i]}" = "${selected}" ]]; then
      set_model $i
      echo "Model changed to $model_name (ID: $model_id)"
      break
    fi
  done
}

invalidate_cache() {
  [[ -f "$CACHE_FILE" ]] && rm $CACHE_FILE
}

refresh() {
  local exp=$(
    grep "_access" $COOKIE_FILE | cut -f7 | cut -d. -f2 | base64 -d 2>/dev/null |
      grep -o '"exp":[0-9]*' | cut -d: -f2
  )

  [ "$(date +%s)" -gt "$exp" ] &&
    curl -s -X POST -o /dev/null "$BASE_URL/authentication/token/refresh/" \
      -H "$HEADER_REFERER" --cookie "$COOKIE_FILE" --cookie-jar "$COOKIE_FILE"
}

call() {
  refresh
  curl -s --cookie "$COOKIE_FILE" -H "Content-Type: application/json" -H "$HEADER_REFERER" "$@"
}

get_conversations() {
  [ ! -f $CACHE_FILE ] && call "$BASE_URL/conversations/?order=created" | tee "$CACHE_FILE"

  local cur=$(date +%s)
  local mod=$([ $(uname) = 'Linux' ] && stat --format=%Y $CACHE_FILE || stat -f %m $CACHE_FILE)
  if [ $((cur - mod)) -lt $CACHE_TIMEOUT ]; then
    cat "$CACHE_FILE"
  else
    call "$BASE_URL/conversations/?order=created" | tee "$CACHE_FILE"
  fi
}

get_conversation_id() {
  local response=$(get_conversations)
  echo $response | jq -c '.results[] | { id, name, size }' | fzf | jq '.id'
}

delete_conversation() {
  local conversation_id=$(get_conversation_id)
  call "$BASE_URL/conversations/$conversation_id" -o /dev/null -X DELETE &
  invalidate_cache
}

patch_conversation() {
  local conversation_id=$(get_conversation_id)
  [[ -z "$conversation_id" ]] && echo "No conversation selected" && exit 1

  local name
  read -p "Enter new name: " name
  call "$BASE_URL/conversations/$conversation_id" -o /dev/null -X PATCH -d '{ "name": "'"$name"'" }' &
}

post_user_message() {
  local message="$1"
  local model_id="$2"
  local conversation_id="$3"

  curl "$BASE_URL/conversations/chat_v2/" -s --cookie "$COOKIE_FILE" -H "Content-Type: multipart/form-data" -H "$HEADER_REFERER" \
    -F "message=$message" -F "model_id=$model_id" -F "regenerate_message_id=-1" -F "conversation_id=$conversation_id"
}

get_response_stream() {
  streaming="true"
  call "$BASE_URL/conversations/streaming/" --data '{"message_id": '"$assistant_message_id"' }' --no-buffer |
    tee $CURRENT_RESPONSE_FILE |
    bat --paging=never --style=rule --language=markdown
  # ([ ! -t 0 ] && cat || bat --paging=never --style=rule --language=markdown)

  streaming="false"
}

stop_response_stream() {
  [ "$streaming" == "false" ] && exit

  call "$BASE_URL/conversations/messages/$assistant_message_id/stop-streaming/" -o /dev/null -d "{}"
  printf "\n$BG[Interrupted]$CLR"
}

count_messages() {
  local last_monday=$([ $(uname) = 'Linux' ] && date -dlast-mon +%s || date -v-sun -u +%s)
  (
    call "$BASE_URL/conversations/?order=created" | jq -c '.results[] | { num_of_unread_messages, created }' &
    call "$BASE_URL/conversations/?order=created&page=2" | jq -c '.results[] | { num_of_unread_messages, created }' &
    wait
  ) | while IFS= read -r conv; do
    local created=$(echo "$conv" | jq -r '.created' | sed 's/\.[0-9]*Z$//') # trim off milliseconds
    local unread=$(echo "$conv" | jq -r '.num_of_unread_messages')

    local created=$(
      [ $(uname) = 'Linux' ] &&
        date --date="$created" +%s || date -u -j -f %Y-%m-%dT%H:%M:%S +%s "$created"
    )
    [ $created -gt "$last_monday" ] && echo $unread
  done | awk '{sum += $1} END {print sum / 2}'
}

dash() {
  printf "$BG%$(tput cols)s$CLR" | tr " " "—"
  echo
}

start_chat_session() {
  echo "SkyDeck.ai with $model_name"
  dash

  conversation_id="$1"

  while true; do
    local queryfile="/tmp/sdai-query-$conversation_id.md"

    # use a local version of `gum` to map enter to new line, ctrl+d to submit
    message=$(
      ~/.local/bin/gum write --char-limit=0 --width=0 --height=0 --no-show-help
    ) || exit 0

    if [[ "$message" = "" ]]; then
      nvim "$queryfile"
      message=$(cat "$queryfile")
    else
      echo "$message"
    fi

    # setting conversation title using prefix [[ on first line
    local first_line=$(echo "$message" | head -n 1)
    if [[ "$first_line" =~ ^\[\[ ]]; then
      conversation_title=$(echo "$first_line" | sed -n 's/^\[\[ \(.*\)/\1/p')
      message=$(echo "$message" | tail -n +2)
    fi

    # use aidd prompt
    if [[ "$message" =~ ^/u ]]; then
      aidd $(echo $message | cut -f2- -d' ') >"$queryfile"
      nvim "$queryfile"
      message=$(cat "$queryfile")
    fi

    # parker
    if [[ "$message" =~ ^/p ]]; then
      parker
      dash
      continue
    fi

    # model
    if [[ "$message" =~ ^/m ]]; then
      pick_model $(cut -f2 -d' ' <<<"$message")
      dash
      continue
    fi

    # yank
    if [[ "$message" =~ ^/y ]]; then
      local block=$(echo "$message" | cut -f2 -d' ')
      if [[ "$block" = "$message" ]]; then
        pbcopy <$CURRENT_RESPONSE_FILE
        echo "Yanked content to clipboard"
      else
        cat $CURRENT_RESPONSE_FILE | sed -n '/^```'"$block"'$/,/^```$/p' | sed '/^```/d' | pbcopy
        echo "Yanked $block to clipboard"
      fi
      dash
      continue
    fi

    if [[ "$message" = "/view" ]]; then
      nvim -R $CURRENT_RESPONSE_FILE
      continue
    fi

    if [[ "$message" = "/viewdiff" ]]; then
      cat $CURRENT_RESPONSE_FILE | sed -n '/^```diff$/,/^```$/p' | sed '/^```/d' | nvim -R -
      continue
    fi

    if [[ "$message" = "/clear" ]]; then
      clear
      continue
    fi

    message=$(jq -Rs '.' <<<"$message")

    dash

    spinner &
    spinner_id=$!

    response=$(post_user_message "$message" "$model_id" "$conversation_id")
    conversation_id=$(jq -r '.data.conversation_id' <<<"$response")
    assistant_message_id=$(jq -r '.data.assistant_message_id' <<<"$response")

    kill $spinner_id
    wait $! 2>/dev/null
    echo -ne '\r   \r'

    trap stop_response_stream SIGINT

    printf "$BG($model_name)$CLR\n"
    get_response_stream
    echo

    trap - SIGINT
    dash

    if [[ ! -z "$conversation_title" ]]; then
      call "$BASE_URL/conversations/$conversation_id" -o /dev/null -X PATCH -d '{ "name": "'"$conversation_title"'" }' &
    fi
  done
}

one_time_prompt() {
  refresh

  message=$(aidd "$@" | jq -Rs '.')
  response=$(post_user_message "$message" "$model_id" "$conversation_id")
  conversation_id=$(jq -r '.data.conversation_id' <<<"$response")
  assistant_message_id=$(jq -r '.data.assistant_message_id' <<<"$response")

  get_response_stream
}

get_conversation_history() {
  conversation_id=$(get_conversation_id)
  wscat -c "wss://admin.skydeck.ai/ws/connect/" \
    -H "Origin: https://eastagile.skydeck.ai" \
    -H "Cookie: eastagile_access=$(grep "_access" $COOKIE_FILE | cut -f7)" \
    -x '{"type":"user_opened_conversation","data":{"conversation_id":'"$conversation_id"'}}' |
    jq -r '.data.messages.[].content' |
    bat --paging=never --style=rule --language=markdown
}

usage() {
  echo "Usage: $(basename $0) [chat | continue | delete | patch | query-models | count-conv | read-cont | use-prompt]"
  exit 1
}

# might add this to zshrc: complete -W 'query-models count-conv' sdai

main() {
  [[ "$#" -lt 1 ]] && usage

  case "$1" in
  "c" | "chat")
    refresh &
    start_chat_session
    ;;
  "co" | "cont" | "continue")
    refresh
    start_chat_session "$(get_conversation_id)"
    ;;
  "d" | "delete")
    refresh
    delete_conversation
    ;;
  "p" | "patch")
    refresh
    patch_conversation
    ;;
  "pc" | "pick-chat")
    refresh &
    pick_model
    start_chat_session
    ;;
  "query-models")
    call "$BASE_URL/models/" | jq -r '.[] | [ .id, .name, .context_window ] | @tsv' | column -t -s $'\t' | sort -k2
    ;;
  "count-conv")
    count_messages
    ;;
  "read-cont")
    get_conversation_history
    start_chat_session $conversation_id
    ;;
  *)
    one_time_prompt "$@"
    ;;
  esac
}

main "$@"
