#!/usr/bin/env bash

# require: fzf jq nvim gum
# require(custom): aidd parker diffix jwt

set -o pipefail
# set -x # for debugging
shopt -s nullglob

BASE_URL="https://admin.skydeck.ai/api/v1"
CACHE_FILE="/tmp/sdai-cache.txt"
CACHE_TIMEOUT=300 # 5 minutes

COOKIE_FILE="$HOME/.sdai/cookies"
COUNT_FILE="$HOME/.sdai/count.txt"
HEADER_REFERER="Referer: https://eastagile.skydeck.ai/"

BG='\e[1;32m'
CLR='\e[0m'

declare -A MODELS
MODELS["cld-35-haiku"]=5171
MODELS["cld-4-opus"]=6850
MODELS["cld-4-sonnet"]=6834
MODELS["gem-25-flash"]=6829
MODELS["gem-25-pro"]=6907
MODELS["gpt-41"]=6360
MODELS["gpt-41-mini"]=6464
MODELS["gpt-41-nano"]=6412
MODELS["gpt-o3"]=6568
MODELS["gpt-o4-mini"]=6516
MODELS["grok-3"]=6891
MODELS["grok-3-fast"]=6897
MODELS["grok-3-mini"]=6894

# global context
STREAMING="false"
CONVERSATION_ID=""
ASSI_MESSAGE_ID=""
MODEL_NAME=""
MODEL_ID=""
MESSAGE=""
EXECUTING_AGENT=false

QUERY_FILE() {
  echo "/tmp/sdai-query-${CONVERSATION_ID:-new}.md"
}
RESPONSE_FILE() {
  echo "/tmp/sdai-conv-${CONVERSATION_ID:-new}.md"
}
OUTPUT_FILE() {
  echo "/tmp/sdai-agent-output-${CONVERSATION_ID:-new}.txt"
}

###
# LOCAL OPS
###

dash() {
  printf "${BG}----------${CLR}\n"
}

abort() {
  echo "$1" && exit 1
}

pick_model() {
  local selected
  selected=$(
    ([[ -z $1 ]] &&
      (for key in "${!MODELS[@]}"; do echo "$key"; done | fzf --prompt="Select a model: ")) ||
      (for key in "${!MODELS[@]}"; do echo "$key"; done | fzf --filter "$1" | head -n 1)
  )
  [[ -z "$selected" ]] && echo "Model selection cancelled" && return
  set_model "$selected"
}

set_model() {
  MODEL_NAME=$1 && MODEL_ID=${MODELS[$1]}
}

invalidate_cache() {
  [[ -f "$CACHE_FILE" ]] && rm $CACHE_FILE
}

increment_message_count() {
  local current
  current=$(cat "$COUNT_FILE")
  echo $((current + 1)) >"$COUNT_FILE"
}

get_access_token() {
  grep "_access" "$COOKIE_FILE" | cut -f7
}

###
# NETWORK CALLS
###

refresh() {
  local exp
  exp=$(get_access_token | jwt | jq '.exp')

  [[ "$(date +%s)" -gt "$exp" ]] &&
    curl -s -X POST -o /dev/null "$BASE_URL/authentication/token/refresh/" \
      -H "$HEADER_REFERER" --cookie "$COOKIE_FILE" --cookie-jar "$COOKIE_FILE"
}

call() {
  refresh
  curl -s --cookie "$COOKIE_FILE" -H "Content-Type: application/json" -H "$HEADER_REFERER" "$@"
}

call_form() {
  refresh
  curl -s --cookie "$COOKIE_FILE" -H "Content-Type: multipart/form-data" -H "$HEADER_REFERER" "$@"
}

delete_conversation() {
  call "$BASE_URL/conversations/${1:-$CONVERSATION_ID}" -o /dev/null -X DELETE &
}

post_user_message() {
  # {"top_k":40,"top_p":1,"max_tokens":64000,"temperature":1}
  # -F "user_model_parameters=$(jq --null-input --argjson temperature 0.1 '{temperature}')" \
  echo "$MESSAGE" > $(OUTPUT_FILE)
  call_form "$BASE_URL/conversations/chat_v2/" -F "message=<$(OUTPUT_FILE)" \
    -F "model_id=$MODEL_ID" -F "conversation_id=$CONVERSATION_ID" -F "regenerate_message_id=-1" \
    -F 'user_model_parameters={"prompt_caching":true,"thinking":{"type":"disabled","budget_tokens":16000},"max_tokens":64000,"temperature":0.17}'
}

get_response_stream() {
  increment_message_count

  STREAMING="true"
  call "$BASE_URL/conversations/streaming/" --data '{"message_id": '"$ASSI_MESSAGE_ID"' }' --no-buffer |
    node -e "process.stdin.on('data', data => process.stdout.write(JSON.parse(data).chunks ?? ''))" |
    tee $(RESPONSE_FILE)

  STREAMING="false"
}

stop_response_stream() {
  [ "$STREAMING" == "false" ] && return

  call "$BASE_URL/conversations/messages/$ASSI_MESSAGE_ID/stop-streaming/" -o /dev/null -d "{}"
  echo -e "${BG}Interrupted${CLR}"
}

get_conversations() {
  [[ ! -f $CACHE_FILE ]] && call "$BASE_URL/conversations/?sort_by=created" | tee "$CACHE_FILE"

  local cur
  cur=$(date +%s)
  local mod
  mod=$( ([[ $(uname) = 'Linux' ]] && stat --format=%Y $CACHE_FILE) || stat -f %m $CACHE_FILE)
  if [[ $((cur - mod)) -lt $CACHE_TIMEOUT ]]; then
    cat "$CACHE_FILE"
  else
    call "$BASE_URL/conversations/?sort_by=created" | tee "$CACHE_FILE"
  fi
}

pick_conversation_id() {
  get_conversations | jq -c '.results[] | { id, name, size }' | fzf | jq '.id'
}

pick_conversation_ids() {
  get_conversations | jq -c '.results[] | { id, name, size }' | fzf -m | jq '.id'
}

count_dollars_spent() {
  local last_monday
  last_monday=$( ([[ $(uname) = 'Linux' ]] && date -d last-sun +%s) || date -v -sun -u +%s)

  (
    call "$BASE_URL/conversations/?sort_by=created" | jq -c '.results[] | { id, created }' &
    call "$BASE_URL/conversations/?sort_by=created&page=2" | jq -c '.results[] | { id, created }' &
    wait
  ) |
    while IFS= read -r conv; do
      local created
      created=$(echo "$conv" | jq -r '.created' | sed 's/\.[0-9]*Z$//') # trim off milliseconds
      local id
      id=$(echo "$conv" | jq -r '.id')

      local created
      created=$(
        ([[ $(uname) = 'Linux' ]] &&
          date --date="$created" +%s) || date -u -j -f %Y-%m-%dT%H:%M:%S +%s "$created"
      )
      [[ $created -gt "$last_monday" ]] && echo "$id"
    done |
    (
      while IFS= read -r id; do
        call "$BASE_URL/conversations/$id/cost" | jq -r '.conversation_total_usage_cost' &
      done
      wait
    ) |
    LC_NUMERIC=C awk '{sum += $1} END {print sum}'
}

get_conversation_history() {
  call "$BASE_URL/conversations/$CONVERSATION_ID" |
    jq -r "[.data.messages[].content] | join(\"\\n$(dash)\\n\")"
}

###
# MAIN OPS
###

execute_agent_command() {
  local aicommand="$1"

  echo ">>>>>>>>> Executing $aicommand"

  EXECUTING_AGENT=true
  trap cancel_agent_execution SIGINT

  sleep 3
  # if the trap is set then this should trigger
  [[ "$EXECUTING_AGENT" = "false" ]] && return 1

  trap - SIGINT
  EXECUTING_AGENT=false

  if [[ "$aicommand" = "parker" ]]; then
    parker $CONVERSATION_ID >&"$(OUTPUT_FILE)"
  else
    eval "$aicommand" >&"$(OUTPUT_FILE)"
  fi
  MESSAGE="Exit code $?: $(cat "$(OUTPUT_FILE)")"
}

cancel_agent_execution() {
  echo -e "\n${BG}Agent execution cancelled${CLR}"
  EXECUTING_AGENT=false
  dash
}

start_chat_session() {
  echo -e "${BG}${MODEL_NAME}${CLR}"

  while true; do
    local queryfile
    queryfile=$(QUERY_FILE)

    dash

    [[ ! -f $(RESPONSE_FILE) ]] && touch $(RESPONSE_FILE)
    local aicommand
    aicommand=$(
      tail -n 4 $(RESPONSE_FILE) | sed -n '/^```agentexecute$/,/^```$/p' | sed '/^```/d'
    )
    if [[ -n $CONVERSATION_ID && -n "$aicommand" ]]; then
      execute_agent_command "$aicommand" ||
        MESSAGE=$(gum write --char-limit=0 --width=0 --no-show-help --prompt="") || return
    else
      MESSAGE=$(gum write --char-limit=0 --width=0 --no-show-help --prompt="") || return
    fi

    if [[ -z "$MESSAGE" ]]; then
      nvim $(QUERY_FILE)
      MESSAGE=$(cat $(QUERY_FILE))
    else
      echo "$MESSAGE"
    fi

    # shell execute
    if [[ "$MESSAGE" =~ ^/! ]]; then
      eval "${MESSAGE#/! }"
      continue
    fi

    # use aidd prompt
    if [[ "$MESSAGE" =~ ^/u ]]; then
      aidd ${MESSAGE#* } >$(QUERY_FILE)
      nvim "$(QUERY_FILE)"
      MESSAGE=$(cat "$(QUERY_FILE)")
    fi

    # parker
    if [[ "$MESSAGE" =~ ^/p ]]; then
      parker $CONVERSATION_ID
      continue
    fi

    # model
    if [[ "$MESSAGE" =~ ^/m ]]; then
      read -r _ model <<<"$MESSAGE"
      pick_model "$model"
      echo -e "${BG}${MODEL_NAME}${CLR}"
      continue
    fi

    # yank
    if [[ "$MESSAGE" =~ ^/y ]]; then
      read -r _ block <<<"$MESSAGE"
      if [[ -z "$block" ]]; then
        cat $(RESPONSE_FILE)
      else
        cat $(RESPONSE_FILE) | sed -n '/^```'"$block"'.*$/,/^```$/p' | sed '/^```/d'
      fi | {
        ([[ $(uname) = 'Darwin' ]] && pbcopy) || xclip -sel c
      }
      continue
    fi

    if [[ "$MESSAGE" = "/colab" ]]; then
      call "$BASE_URL/conversations/collaboration/stop" --data '{"conversation_id":'"$CONVERSATION_ID"'}' >/dev/null
      echo "https://eastagile.skydeck.ai/conversation/$(
        call "$BASE_URL/conversations/collaboration/start" --data '{"conversation_id":'"$CONVERSATION_ID"'}' |
          jq -r '.data.collaboration_slug'
      )"
      continue
    fi

    if [[ "$MESSAGE" = "/snap" ]]; then
      call "$BASE_URL/conversations/$CONVERSATION_ID/create_snapshot" --data '{"anonymize":"false"}' | jq -r '.url'
      continue
    fi

    if [[ "$MESSAGE" = "/clear" ]]; then
      clear
      continue
    fi

    dash
    send_and_recv_cancellable

    printf "\n${BG}%s${CLR}\n" "$(call "$BASE_URL/conversations/$CONVERSATION_ID/cost" |
      jq -r '.conversation_total_usage_cost')"
  done
}

send_and_recv_cancellable() {
  local response
  response="$(post_user_message)"

  if [[ $? ]]; then
    read -r CONVERSATION_ID ASSI_MESSAGE_ID < <(
      jq -r '[.data.conversation_id, .data.messages[-1].id] | join(" ")' <<<"$response"
    )
    trap stop_response_stream SIGINT
    get_response_stream
    trap - SIGINT
  else
    echo "$response"
  fi
}

main() {
  [[ "$#" -lt 1 ]] &&
    abort "Usage: sdai [chat | continue | delete | patch | query-models | count-conv | read-cont]"

  pick_model "$([ -t 0 ] && echo "cld-4-sonnet" || echo "gpt-41-nano")"

  case "$1" in
  c | chat)
    start_chat_session
    ;;
  pc | pick-chat)
    pick_model
    start_chat_session
    ;;
  cont | continue)
    CONVERSATION_ID=$(pick_conversation_id) || abort "No conversation selected"
    get_conversation_history
    start_chat_session
    ;;
  d | delete)
    for id in $(pick_conversation_ids); do
      delete_conversation "$id"
    done
    invalidate_cache
    ;;
  query-models)
    call "$BASE_URL/models/" |
      jq -r '.[] | [ .id, .name, .context_window ] | @tsv' | column -t -s $'\t' | sort -u -k2
    ;;
  count-conv)
    cat "$COUNT_FILE"
    ;;
  count-dollars)
    count_dollars_spent
    ;;
  *)
    MESSAGE=$(aidd "$@") || abort "No such aidd template: $1"
    send_and_recv_cancellable
    ;;
  esac
}

main "$@"
