#!/bin/bash

# Linear API Bash Script
# Usage: ./linear.sh [command] [args...]
#
# Commands:
#   issue <issue-id>     - Get issue details
#   issues               - List recent issues
#   setup                - Setup API key

CONFIG_FILE="~/.linear_config"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

API_URL="https://api.linear.app/graphql"

# Load API key from config
load_config() {
  if [[ -f $CONFIG_FILE ]]; then
    source "$CONFIG_FILE"
  fi

  if [[ -z $LINEAR_API_KEY ]]; then
    echo -e "${RED}Error: No API key found. Run './linear.sh setup' first.${NC}"
    exit 1
  fi
}

# Setup API key
setup_api_key() {
  echo -e "${BLUE}Linear API Setup${NC}"
  echo "Get your API key from: https://linear.app/settings/api"
  echo
  read -s -p "Enter your Linear API key: " api_key
  echo

  if [[ -z $api_key ]]; then
    echo -e "${RED}Error: No API key provided${NC}"
    exit 1
  fi

  # Test the API key
  response=$(curl -s -X POST \
    -H "Content-Type: application/json" \
    -H "Authorization: $api_key" \
    --data '{"query":"{ viewer { id name } }"}' \
    "$API_URL")

  if echo "$response" | grep -q '"errors"'; then
    echo -e "${RED}Error: Invalid API key${NC}"
    echo "$response" | jq '.errors[0].message' 2>/dev/null || echo "$response"
    exit 1
  fi

  # Save API key
  echo "LINEAR_API_KEY=\"$api_key\"" >"$CONFIG_FILE"
  chmod 600 "$CONFIG_FILE"

  user_name=$(echo "$response" | jq -r '.data.viewer.name' 2>/dev/null)
  echo -e "${GREEN}✓ API key saved successfully!${NC}"
  echo -e "Welcome, ${BLUE}$user_name${NC}!"
}

# Make GraphQL request
graphql_request() {
  local query="$1"

  response=$(curl -s -X POST \
    -H "Content-Type: application/json" \
    -H "Authorization: $LINEAR_API_KEY" \
    --data "{\"query\":\"$query\"}" \
    "$API_URL")

  if echo "$response" | grep -q '"errors"'; then
    echo -e "${RED}Error: API request failed${NC}"
    echo "$response" | jq '.errors[0].message' 2>/dev/null || echo "$response"
    return 1
  fi

  echo "$response"
}

# Get issue details
get_issue() {
  local issue_id="$1"

  if [[ -z $issue_id ]]; then
    echo -e "${RED}Error: Issue ID required${NC}"
    echo "Usage: ./linear.sh issue <issue-id>"
    exit 1
  fi

  query="{ issue(id: \"$issue_id\") { id title description state { name } assignee { name } priority labels { nodes { name } } url createdAt updatedAt } }"

  response=$(graphql_request "$query")
  if [[ $? -ne 0 ]]; then
    return 1
  fi

  # Parse and display issue
  issue_data=$(echo "$response" | jq '.data.issue')

  if [[ $issue_data == "null" ]]; then
    echo -e "${RED}Error: Issue not found${NC}"
    return 1
  fi

  title=$(echo "$issue_data" | jq -r '.title')
  description=$(echo "$issue_data" | jq -r '.description // "No description"')
  state=$(echo "$issue_data" | jq -r '.state.name')
  assignee=$(echo "$issue_data" | jq -r '.assignee.name // "Unassigned"')
  priority=$(echo "$issue_data" | jq -r '.priority // "No priority"')
  url=$(echo "$issue_data" | jq -r '.url')
  created=$(echo "$issue_data" | jq -r '.createdAt')
  updated=$(echo "$issue_data" | jq -r '.updatedAt')

  echo -e "${BLUE}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
  echo -e "${GREEN}$title${NC}"
  echo -e "${BLUE}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
  echo -e "${YELLOW}ID:${NC} $issue_id"
  echo -e "${YELLOW}State:${NC} $state"
  echo -e "${YELLOW}Assignee:${NC} $assignee"
  echo -e "${YELLOW}Priority:${NC} $priority"
  echo -e "${YELLOW}Created:${NC} $(date -d "$created" '+%Y-%m-%d %H:%M' 2>/dev/null || echo "$created")"
  echo -e "${YELLOW}Updated:${NC} $(date -d "$updated" '+%Y-%m-%d %H:%M' 2>/dev/null || echo "$updated")"
  echo -e "${YELLOW}URL:${NC} $url"
  echo
  echo -e "${YELLOW}Description:${NC}"
  echo "$description"
  echo
}

# List recent issues
list_issues() {
  query="{ issues(first: 10, orderBy: updatedAt) { nodes { id title state { name } assignee { name } priority createdAt } } }"

  response=$(graphql_request "$query")
  if [[ $? -ne 0 ]]; then
    return 1
  fi

  echo -e "${BLUE}Recent Issues:${NC}"
  echo -e "${BLUE}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"

  echo "$response" | jq -r '.data.issues.nodes[] | "\(.id) | \(.title) | \(.state.name) | \(.assignee.name // "Unassigned")"' |
    while IFS='|' read -r id title state assignee; do
      id=$(echo "$id" | xargs)
      title=$(echo "$title" | xargs)
      state=$(echo "$state" | xargs)
      assignee=$(echo "$assignee" | xargs)

      printf "${GREEN}%-12s${NC} ${YELLOW}%-8s${NC} ${BLUE}%-12s${NC} %s\n" "$id" "$state" "$assignee" "$title"
    done
}

# Get issue ID from Linear URL or identifier
parse_issue_id() {
  local input="$1"

  # If it's a URL, extract the issue ID
  if [[ $input =~ https://linear\.app/.*/issue/([^/]+) ]]; then
    echo "${BASH_REMATCH[1]}"
  else
    echo "$input"
  fi
}

# Main command handler
case "$1" in
"setup")
  setup_api_key
  ;;
"issue")
  load_config
  issue_id=$(parse_issue_id "$2")
  get_issue "$issue_id"
  ;;
"issues")
  load_config
  list_issues
  ;;
*)
  echo -e "${BLUE}Linear CLI Tool${NC}"
  echo
  echo "Usage: $0 [command] [args...]"
  echo
  echo "Commands:"
  echo "  setup                Setup API key"
  echo "  issue <id>          Get issue details (accepts ID or Linear URL)"
  echo "  issues              List recent issues"
  echo
  echo "Examples:"
  echo "  $0 setup"
  echo "  $0 issue GILD-228"
  echo "  $0 issue https://linear.app/hubmaker-labs/issue/GILD-228"
  echo "  $0 issues"
  echo
  ;;
esac
