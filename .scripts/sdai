#!/bin/bash

LOG_FILE="/tmp/sdai-session-$(date +%s).log"
BASE_URL="https://admin.skydeck.ai/api/v1"
REFERER="https://eastagile.skydeck.ai/"

bg='\e[1;32m'
fg1='\e[1;37m'
fg2='\e[1;33m'
clr='\e[0m'

streaming="false"
conversation_id=""
message_id=""
# model_id=4094 # gpt-4o
# model_id=4187 # claude-opus
# model_id=4189 # clause-haiku
model_id=4190 # claude-3.5-sonnet

spinner() {
    local delay=0.1
    local spinstr='|/-\'
    while true; do
        local temp=${spinstr#?}
        printf " [%c]  " "$spinstr"
        local spinstr=$temp${spinstr%"$temp"}
        sleep $delay
        printf "\b\b\b\b\b\b"
    done
}

post_user_message() {
  local message="$1"
  local model_id="$2"
  local conversation_id="$3"
  local data

  if [[ -z "$conversation_id" ]]; then
    data='{ "message": "'"$message"'", "model_id": '"$model_id"', "regenerate_message_id": -1 }'
  else
    data='{ "message": "'"$message"'", "model_id": '"$model_id"', "conversation_id": '"$conversation_id"', "regenerate_message_id": -1 }'
  fi

  # echo "$data" >> "$LOG_FILE"

  curl -s -X POST "$BASE_URL/conversations/chat_v2/" \
    -H "Content-Type: application/json" -H "Cookie: eastagile_sessionid=$COOKIES" -H "Referer: $REFERER" \
    -d "$data"
}

get_response_stream() {
  message_id="$1"
  streaming="true"

  if [[ "$beautify" = true ]]; then
    curl -s --no-buffer -X GET "$BASE_URL/conversations/streaming/?message_id=$message_id" \
      -H "Cookie: eastagile_sessionid=$COOKIES" -H "Referer: $REFERER" \
    | bat --style=grid --paging=never --theme=Dracula --language md
  else
    curl -s --no-buffer -X GET "$BASE_URL/conversations/streaming/?message_id=$message_id" \
      -H "Cookie: eastagile_sessionid=$COOKIES" -H "Referer: $REFERER"
    echo ""
  fi

  streaming="false"
}

stop_response_stream() {
  if [[ "$streaming" == "true" ]]; then
    curl -s -o /dev/null -X POST "$BASE_URL/conversations/messages/$message_id/stop-streaming/" \
      -H "Content-Type: application/json" -H "Cookie: eastagile_sessionid=$COOKIES" -H "Referer: $REFERER" \
      -d "{}"
    echo "Interrupted"
  else
    exit
  fi
}

get_conversation_id() {
  curl -s "$BASE_URL/conversations/" \
    -H "Content-Type: application/json" -H "Cookie: eastagile_sessionid=$COOKIES" -H "Referer: $REFERER" \
  | jq -c '.results[] | { id, name }' | fzf | jq '.id'
}

delete_conversation() {
  local conversation_id=$(get_conversation_id)
  curl -s -o /dev/null -X DELETE "$BASE_URL/conversations/$conversation_id" \
    -H "Content-Type: application/json" -H "Cookie: eastagile_sessionid=$COOKIES" -H "Referer: $REFERER" &
}

patch_conversation() {
  local conversation_id=$(get_conversation_id)
  local name
  echo -n "Enter new name: "
  read name
  curl -s -o /dev/null -X PATCH "$BASE_URL/conversations/$conversation_id" \
    -H "Content-Type: application/json" -H "Cookie: eastagile_sessionid=$COOKIES" -H "Referer: $REFERER" \
    -d '{ "name": "'"$name"'" }' &
}

start_chat_session() {
  conversation_id="$1"
  tempfile=""

  while true; do
    printf "$bg:Ctrl+D sends:$clr "

    message=$(cat)
    if [[ "$message" = "" ]]; then
      [[ -z "$tempfile" ]] && tempfile=$(mktemp)
      nvim "$tempfile"
      message=$(cat "$tempfile")
    fi

    message=$(echo "$message" | awk '{gsub(/"/, "\\\""); printf "%s\\n", $0}')

    spinner &
    spinner_id=$!

    response=$(post_user_message "$message" "$model_id" "$conversation_id")
    conversation_id=$(echo "$response" | jq -r '.data.conversation_id')
    assistant_message_id=$(echo "$response" | jq -r '.data.assistant_message_id')

    kill $spinner_id && printf '\b\b\b\b\b\b    \b\b\b\b'

    trap stop_response_stream SIGINT

    get_response_stream "$assistant_message_id"

    trap - SIGINT
  done
}

[[ "$#" -lt 1 ]] && echo "Usage: sdai [chat|delete|patch|continue] [OPTIONS]" && exit 0

beautify=false

action="$1"
shift

for arg in "$@"; do
  case "$arg" in
    "-p","--plain")
      beautify=false
      ;;
    *)
      ;;
  esac
done

case "$action" in
  "delete")
    delete_conversation
    ;;
  "patch")
    patch_conversation
    ;;
  "chat")
    start_chat_session
    ;;
  "continue")
    start_chat_session "$(get_conversation_id)"
    ;;
  *)
    echo "Invalid subcommand. Must be one of: chat, delete, patch, continue" && exit 1
    ;;
esac
