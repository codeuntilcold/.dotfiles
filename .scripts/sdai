#!/bin/bash

LOG_FILE="/tmp/sdai-session-$(date +%s).log"
BASE_URL="https://admin.skydeck.ai/api/v1"
CACHE_FILE="/tmp/sdai-cache.txt"
CACHE_TIMEOUT=300  # 5 minutes

COOKIE_FILE="$HOME/.sdai/cookies"
HEADER_REFERER="Referer: https://eastagile.skydeck.ai/"

refresh() {
  # exp=$(echo -n $JWT | cut -d. -f2 | base64 -d 2>/dev/null | jq -r .exp)
  # [ "$exp" ] && [ $(date +%s) -gt "$exp" ] && echo "Expired" || echo "Not expired"

  curl -X POST "$BASE_URL/authentication/token/refresh/" -H "$HEADER_REFERER" --cookie "$COOKIE_FILE"
}

# refresh

bg='\e[1;32m'
fg1='\e[1;37m'
fg2='\e[1;33m'
clr='\e[0m'

streaming="false"
conversation_id=""
message_id=""
# model_id=4094 # gpt-4o
# model_id=4187 # claude-opus
# model_id=4189 # clause-haiku
model_id=4190 # claude-3.5-sonnet

spinner() {
  local delay=0.1
  local spinstr='|/-\'
  # local spinstr='⠋⠙⠹⠸⠼⠴⠦⠧⠇⠏'

  while true; do
    local temp=${spinstr#?}
    printf " %c " "$spinstr"
    local spinstr=$temp${spinstr%"$temp"}
    sleep $delay
    printf "\b\b\b"
  done
}

invalidate_cache() {
  [[ -f "$CACHE_FILE" ]] && rm $CACHE_FILE
}

call() {
  local url=$1
  shift

  curl -s $url --cookie "$COOKIE_FILE" -H "Content-Type: application/json" -H "$HEADER_REFERER" "$@"
}

post_user_message() {
  local message="$1"
  local model_id="$2"
  local conversation_id="$3"
  local data

  if [[ -z "$conversation_id" ]]; then
    data='{ "message": '"$message"', "model_id": '"$model_id"', "regenerate_message_id": -1 }'
  else
    data='{ "message": '"$message"', "model_id": '"$model_id"', "conversation_id": '"$conversation_id"', "regenerate_message_id": -1 }'
  fi

  # echo "$data" >> "$LOG_FILE"

  call "$BASE_URL/conversations/chat_v2/" -d "$data"
}

get_response_stream() {
  message_id="$1"
  streaming="true"

  if [[ "$beautify" = true ]]; then
    call "$BASE_URL/conversations/streaming/?message_id=$message_id" | bat --style=grid --paging=never --theme=Dracula --language md
  else
    echo '———'
    call "$BASE_URL/conversations/streaming/?message_id=$message_id" --no-buffer | tee "/tmp/sdai-conv-$conversation_id.md" | tee "/tmp/sdai-conv-000000.md"
    echo ""
    echo '———'
  fi

  streaming="false"
}

stop_response_stream() {
  if [[ "$streaming" == "true" ]]; then
    call "$BASE_URL/conversations/messages/$message_id/stop-streaming/" -o /dev/null -d "{}"
    echo "Interrupted"
  else
    exit
  fi
}

get_conversation_id() {
  local response=$(
    if [ -f "$CACHE_FILE" ] && [ $(($(date +%s) - $(stat -f %m "$CACHE_FILE"))) -lt $CACHE_TIMEOUT ]; then
      cat "$CACHE_FILE"
    else
      call "$BASE_URL/conversations/" | tee "$CACHE_FILE"
    fi
  )
  echo $response | jq -c '.results[] | { id, name }' | fzf | jq '.id'
}

delete_conversation() {
  local conversation_id=$(get_conversation_id)
  call "$BASE_URL/conversations/$conversation_id" -o /dev/null -X DELETE &
  invalidate_cache
}

patch_conversation() {
  local conversation_id=$(get_conversation_id)
  local name
  echo -n "Enter new name: "
  read name
  call "$BASE_URL/conversations/$conversation_id" -o /dev/null -X PATCH -d '{ "name": "'"$name"'" }' &
}

start_chat_session() {
  conversation_id="$1"
  tempfile=""

  while true; do
    printf "$bg==>$clr "

    message=$(cat)
    if [[ "$message" = "" ]]; then
      [[ -z "$tempfile" ]] && tempfile=$(mktemp)
      nvim "$tempfile"
      message=$(cat "$tempfile")
      echo ""
    fi

    message=$(echo "$message" | jq -Rs .)

    spinner &
    spinner_id=$!

    response=$(post_user_message "$message" "$model_id" "$conversation_id")
    conversation_id=$(echo "$response" | jq -r '.data.conversation_id')
    assistant_message_id=$(echo "$response" | jq -r '.data.assistant_message_id')

    kill $spinner_id
    wait $! 2>/dev/null
    printf '\b\b\b   \b\b\b'

    trap stop_response_stream SIGINT

    get_response_stream "$assistant_message_id"

    trap - SIGINT
  done
}

start_ws_session() {
  wscat -c wss://admin.skydeck.ai/ws/connect/ \
  -H "Cookie: eastagile_sessionid=$COOKIES" -H 'Origin: https://eastagile.skydeck.ai'
}

[[ "$#" -lt 1 ]] && echo "Usage: sdai [chat|delete|patch|continue] [OPTIONS]" && exit 0

beautify=false

action="$1"
shift

for arg in "$@"; do
  case "$arg" in
    "-p","--plain")
      beautify=false
      ;;
    *)
      ;;
  esac
done

case "$action" in
  "d"|"del"|"delete")
    delete_conversation
    ;;
  "p"|"patch")
    patch_conversation
    ;;
  "c"|"ch"|"chat")
    start_chat_session
    ;;
  "cont"|"continue")
    start_chat_session "$(get_conversation_id)"
    ;;
  *)
    echo "Invalid subcommand. Must be one of: chat, delete, patch, continue" && exit 1
    ;;
esac
