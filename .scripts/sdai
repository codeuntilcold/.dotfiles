#!/bin/bash

BASE_URL="https://admin.skydeck.ai/api/v1"
CURRENT_RESPONSE_FILE="/tmp/sdai-conv-000000.md"
CACHE_FILE="/tmp/sdai-cache.txt"
CACHE_TIMEOUT=300  # 5 minutes

COOKIE_FILE="$HOME/.sdai/cookies"
HEADER_REFERER="Referer: https://eastagile.skydeck.ai/"

BG='\e[1;32m'
CLR='\e[0m'

streaming="false"
conversation_id=""
assistant_message_id=""
# model_id=4094 # gpt-4o
model_id=4190 # claude-3.5-sonnet

spinner() {
  local rest=""
  local spinstr='⠋⠙⠹⠸⠼⠴⠦⠧⠇⠏'

  while true; do
    printf " %s " "${spinstr:0:1}"
    rest=${spinstr#?}
    spinstr=$rest${spinstr:0:1}
    sleep 0.1
    printf "\b\b\b"
  done
}

invalidate_cache() {
  [[ -f "$CACHE_FILE" ]] && rm $CACHE_FILE
}

refresh() {
  local exp=$(
    grep "_access" $COOKIE_FILE | cut -f7 | cut -d. -f2 | base64 -d 2>/dev/null \
      | grep -o '"exp":[0-9]*' | cut -d: -f2
  )

  [ "$(date +%s)" -gt "$exp" ] && \
    curl -s -X POST -o /dev/null "$BASE_URL/authentication/token/refresh/" \
      -H "$HEADER_REFERER" --cookie "$COOKIE_FILE" --cookie-jar "$COOKIE_FILE"
}

call() {
  refresh
  curl -s --cookie "$COOKIE_FILE" -H "Content-Type: application/json" -H "$HEADER_REFERER" "$@"
}

get_conversation_id() {
  local response
  if [ -f "$CACHE_FILE" ] && [ $(($(date +%s) - $(stat -f %m "$CACHE_FILE"))) -lt $CACHE_TIMEOUT ]; then
    response=$(cat "$CACHE_FILE")
  else
    response=$(call "$BASE_URL/conversations/" | tee "$CACHE_FILE")
  fi
  echo $response | jq -c '.results[] | { id, name, size }' | fzf | jq '.id'
}

delete_conversation() {
  local conversation_id=$(get_conversation_id)
  call "$BASE_URL/conversations/$conversation_id" -o /dev/null -X DELETE &
  invalidate_cache
}

patch_conversation() {
  local conversation_id=$(get_conversation_id)
  local name
  read -p "Enter new name: " name
  call "$BASE_URL/conversations/$conversation_id" -o /dev/null -X PATCH -d '{ "name": "'"$name"'" }' &
}

post_user_message() {
  local message="$1"
  local model_id="$2"
  local conversation_id="$3"
  local data

  if [[ -z "$conversation_id" ]]; then
    data='{ "message": '"$message"', "model_id": '"$model_id"', "regenerate_message_id": -1 }'
  else
    data='{ "message": '"$message"', "model_id": '"$model_id"', "conversation_id": '"$conversation_id"', "regenerate_message_id": -1 }'
  fi

  call "$BASE_URL/conversations/chat_v2/" -d "$data"
}

get_response_stream() {
  streaming="true"
  call "$BASE_URL/conversations/streaming/?message_id=$assistant_message_id" --no-buffer | tee $CURRENT_RESPONSE_FILE
  streaming="false"
}

stop_response_stream() {
  if [[ "$streaming" == "true" ]]; then
    call "$BASE_URL/conversations/messages/$assistant_message_id/stop-streaming/" -o /dev/null -d "{}"
    printf "\n$BG[Interrupted]$CLR"
  else
    exit
  fi
}

start_chat_session() {
  conversation_id="$1"
  local tempfile=""

  while true; do
    printf "$BG==>$CLR "

    message=$(cat)
    if [[ "$message" = "" ]]; then
      [[ -z "$tempfile" ]] && tempfile=$(mktemp)
      nvim "$tempfile"
      message=$(cat "$tempfile")
      echo ""
    fi

    message=$(jq -Rs '.' <<< "$message")

    spinner &
    spinner_id=$!

    response=$(post_user_message "$message" "$model_id" "$conversation_id")
    conversation_id=$(jq -r '.data.conversation_id' <<< "$response")
    assistant_message_id=$(jq -r '.data.assistant_message_id' <<< "$response")

    kill $spinner_id
    wait $! 2>/dev/null
    printf '\b\b\b   \b\b\b'

    echo '———'
    trap stop_response_stream SIGINT
    get_response_stream
    trap - SIGINT
    echo
    echo '———'
  done
}

main() {
  [[ "$#" -lt 1 ]] && echo "Usage: sdai [chat|delete|patch|continue]" && exit 0

  refresh

  case "$1" in
    "d"|"del"|"delete")
      delete_conversation
      ;;
    "p"|"patch")
      patch_conversation
      ;;
    "c"|"ch"|"chat")
      start_chat_session
      ;;
    "cont"|"continue")
      start_chat_session "$(get_conversation_id)"
      ;;
    *)
      echo "Invalid subcommand. Must be one of: chat, delete, patch, continue" && exit 1
      ;;
  esac
}

main "$@"
