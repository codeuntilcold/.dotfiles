#!/usr/bin/env bash

set -o pipefail
# set -x # for debugging
shopt -s nullglob

BASE_URL="https://admin.skydeck.ai/api/v1"
CURRENT_RESPONSE_FILE="/tmp/sdai-conv-000000.md"
CACHE_FILE="/tmp/sdai-cache.txt"
CACHE_TIMEOUT=300 # 5 minutes

COOKIE_FILE="$HOME/.sdai/cookies"
COUNT_FILE="$HOME/.sdai/count.txt"
HEADER_REFERER="Referer: https://eastagile.skydeck.ai/"

BG='\e[1;32m'
CLR='\e[0m'

declare -A MODELS
MODELS["cld-35-haiku"]=5171
MODELS["cld-35-sonnet"]=5101
MODELS["cld-37-sonnet"]=6188
MODELS["gem-2-flash"]=6182
MODELS["gem-2-flash-lite"]=6215
MODELS["gem-2-flash-lite-thinking"]=6216
MODELS["gem-2-pro"]=6137
MODELS["gem-25-pro"]=6324
MODELS["gpt-4o"]=4094
MODELS["gpt-4o-mini"]=4430
MODELS["gpt-o1"]=5728
MODELS["gpt-o3-mini"]=6006
MODELS["deep-r1"]=5971

STREAMING="false"
CONVERSATION_ID=""
ASSI_MESSAGE_ID=""
MODEL_NAME=""
MODEL_ID=""

###
# LOCAL OPS
###

fail() {
  printf '%s\n' "$1" >&2
  exit "${2-1}"
}

spinner() {
  local spinstr='⠋⠙⠹⠸⠼⠴⠦⠧⠇⠏'
  for ((i = 0; i < 100; i++)); do
    printf " %s " "${spinstr:0:1}"
    sleep 0.05
    printf "\r"
    spinstr=${spinstr#?}${spinstr:0:1}
  done
}

pick_model() {
  local selected=$(
    [[ -z $1 ]] &&
      (for key in ${!MODELS[@]}; do echo $key; done | fzf --prompt="Select a model: ") ||
      (for key in ${!MODELS[@]}; do echo $key; done | fzf --filter $1 | head -n 1)
  )

  [[ -z "$selected" ]] && echo "Model selection cancelled" && return

  set_model $selected
}

set_model() {
  MODEL_NAME=$1 && MODEL_ID=${MODELS[$1]}
}

invalidate_cache() {
  [[ -f "$CACHE_FILE" ]] && rm $CACHE_FILE
}

increment_message_count() {
  local current=$(cat $COUNT_FILE)
  echo $((current + 1)) >$COUNT_FILE
}

count_messages() {
  cat $COUNT_FILE
}

dash() {
  printf "$BG%$(tput cols)s$CLR" | tr ' ' '-'
  echo
}

clean_message() {
  # jq -Rrs '.' <<<"$1"
  echo "$1"
}

get_access_token() {
  grep "_access" $COOKIE_FILE | cut -f7
}

###
# NETWORK CALLS
###

refresh() {
  local exp=$(get_access_token | jwt | jq '.exp')

  [[ "$(date +%s)" -gt "$exp" ]] &&
    curl -s -X POST -o /dev/null "$BASE_URL/authentication/token/refresh/" \
      -H "$HEADER_REFERER" --cookie "$COOKIE_FILE" --cookie-jar "$COOKIE_FILE"
}

call() {
  refresh
  curl -s --cookie "$COOKIE_FILE" -H "Content-Type: application/json" -H "$HEADER_REFERER" "$@"
}

call_form() {
  refresh
  curl -s --cookie "$COOKIE_FILE" -H "Content-Type: multipart/form-data" -H "$HEADER_REFERER" "$@"
}

get_conversations() {
  [[ ! -f $CACHE_FILE ]] && call "$BASE_URL/conversations/?sort_by=created" | tee "$CACHE_FILE"

  local cur=$(date +%s)
  local mod=$([[ $(uname) = 'Linux' ]] && stat --format=%Y $CACHE_FILE || stat -f %m $CACHE_FILE)
  if [[ $((cur - mod)) -lt $CACHE_TIMEOUT ]]; then
    cat "$CACHE_FILE"
  else
    call "$BASE_URL/conversations/?sort_by=created" | tee "$CACHE_FILE"
  fi
}

delete_conversation() {
  call "$BASE_URL/conversations/$CONVERSATION_ID" -o /dev/null -X DELETE &
}

patch_conversation() {
  call "$BASE_URL/conversations/$CONVERSATION_ID" -o /dev/null -X PATCH -d '{ "name": "'"$1"'" }'
  notify-send "Changed conversation name to $1" -t 3000
}

post_user_message() {
  local cleaned_message="$(clean_message "$1")"
  shift
  call_form "$BASE_URL/conversations/chat_v2/" --form-string "message=$cleaned_message" \
    -F "model_id=$MODEL_ID" -F "conversation_id=$CONVERSATION_ID" -F "regenerate_message_id=-1" $@
}

get_response_stream() {
  increment_message_count

  STREAMING="true"
  call "$BASE_URL/conversations/streaming/" --data '{"message_id": '"$ASSI_MESSAGE_ID"' }' --no-buffer |
    tee $CURRENT_RESPONSE_FILE
  # bat --paging=never --style=rule --language=markdown

  STREAMING="false"
}

stop_response_stream() {
  [ "$STREAMING" == "false" ] && return

  call "$BASE_URL/conversations/messages/$ASSI_MESSAGE_ID/stop-streaming/" -o /dev/null -d "{}"
  printf "\n$BG[Interrupted]$CLR"
}

pick_conversation_id() {
  get_conversations | jq -c '.results[] | { id, name, size }' | fzf | jq '.id'
}

count_unread_messages() {
  local last_monday=$([ $(uname) = 'Linux' ] && date -dlast-mon +%s || date -v-sun -u +%s)
  (
    call "$BASE_URL/conversations/?sort_by=created" | jq -c '.results[] | { num_of_unread_messages, created }' &
    call "$BASE_URL/conversations/?sort_by=created&page=2" | jq -c '.results[] | { num_of_unread_messages, created }' &
    wait
  ) | while IFS= read -r conv; do
    local created=$(echo "$conv" | jq -r '.created' | sed 's/\.[0-9]*Z$//') # trim off milliseconds
    local unread=$(echo "$conv" | jq -r '.num_of_unread_messages')

    local created=$(
      [ $(uname) = 'Linux' ] &&
        date --date="$created" +%s || date -u -j -f %Y-%m-%dT%H:%M:%S +%s "$created"
    )
    [ $created -gt "$last_monday" ] && echo $unread
  done | awk '{sum += $1} END {print sum / 2}'
}

count_dollars_spent() {
  local last_monday=$([ $(uname) = 'Linux' ] && date -dlast-mon +%s || date -v-sun -u +%s)

  (
    call "$BASE_URL/conversations/?sort_by=created" | jq -c '.results[] | { id, created }' &
    call "$BASE_URL/conversations/?sort_by=created&page=2" | jq -c '.results[] | { id, created }' &
    wait
  ) |
    while IFS= read -r conv; do
      local created=$(echo "$conv" | jq -r '.created' | sed 's/\.[0-9]*Z$//') # trim off milliseconds
      local id=$(echo "$conv" | jq -r '.id')

      local created=$(
        [ $(uname) = 'Linux' ] &&
          date --date="$created" +%s || date -u -j -f %Y-%m-%dT%H:%M:%S +%s "$created"
      )
      [ $created -gt "$last_monday" ] && echo $id
    done |
    (
      while IFS= read -r id; do
        call "$BASE_URL/conversations/$id/cost" | jq -r '.conversation_total_usage_cost' &
      done
      wait
    ) |
    LC_NUMERIC=C awk '{sum += $1} END {print sum}'
}

get_conversation_history() {
  # wscat -c "wss://admin.skydeck.ai/ws/connect/" \
  #   -H "Origin: https://eastagile.skydeck.ai" \
  #   -H "Cookie: eastagile_access=$(get_access_token)" \
  #   -x '{"type":"user_opened_conversation","data":{"conversation_id":'"$CONVERSATION_ID"'}}' |
  #   jq -r '.data.messages.[].content' |
  #   bat --paging=never --style=rule --language=markdown

  call "$BASE_URL/conversations/$CONVERSATION_ID" |
    jq -r "[.data.messages[].content] | join(\"\\n$(dash)\\n\")"
}

###
# MAIN OPS
###

start_chat_session() {
  echo "SkyDeck.ai with $MODEL_NAME"
  dash

  while true; do
    local queryfile="/tmp/sdai-query-$CONVERSATION_ID.md"

    local aicommand=$(tail -n 4 $CURRENT_RESPONSE_FILE | sed -n '/^```agentexecute$/,/^```$/p' | sed '/^```/d')
    if [[ -n $CONVERSATION_ID && -n "$aicommand" ]]; then
      echo ">>>>>>>>> Executing $aicommand"
      spinner &
      spinner_id=$!
      sleep 3
      kill $spinner_id 2>/dev/null
      wait $! 2>/dev/null
      echo -ne '\r   \r'

      eval "$aicommand" |& tee /tmp/heyyy
      message=$(cat /tmp/heyyy)
    else
    # use a local version of `gum` to map enter to new line, ctrl+d to submit
    message=$(
      gum write --char-limit=0 --width=0 --height=0 --no-show-help
    ) || return
    fi

    if [[ -z "$message" ]]; then
      nvim "$queryfile"
      message=$(cat "$queryfile")
    else
      echo "$message"
    fi

    # setting conversation title using prefix [[ on first line
    local first_line=$(echo "$message" | head -n 1)
    if [[ "$first_line" =~ ^\[\[ ]]; then
      conversation_title=${first_line#* }
      message=$(echo "$message" | tail -n +2)
    fi

    # add images
    local post_ext=""
    while read -r line; do
      post_ext+=" -F files=@${line#@@@ }"
    done < <(rg ^@@@ <<<"$message")
    message=$(sed '/^@@@/d' <<<"$message")

    # use aidd prompt
    if [[ "$message" =~ ^/u ]]; then
      aidd ${message#* } >"$queryfile"
      nvim "$queryfile"
      message=$(cat "$queryfile")
    fi

    # parker
    if [[ "$message" =~ ^/p ]]; then
      parker
      dash
      continue
    fi

    # model
    if [[ "$message" =~ ^/m ]]; then
      read -r _ model <<<"$message"
      pick_model "$model"
      dash
      continue
    fi

    # yank
    if [[ "$message" =~ ^/y ]]; then
      read -r _ block <<<"$message"
      if [[ -z "$block" ]]; then
        [[ $(uname) = 'Darwin' ]] && pbcopy <$CURRENT_RESPONSE_FILE
        [[ $(uname) = 'Linux' ]] && xclip -sel c <$CURRENT_RESPONSE_FILE
        echo "Yanked content to clipboard"
      else
        [[ $(uname) = 'Darwin' ]] && cat $CURRENT_RESPONSE_FILE | sed -n '/^```'"$block"'.*$/,/^```$/p' | sed '/^```/d' | pbcopy
        [[ $(uname) = 'Linux' ]] && cat $CURRENT_RESPONSE_FILE | sed -n '/^```'"$block"'.*$/,/^```$/p' | sed '/^```/d' | xclip -sel c
        echo "Yanked $block to clipboard"
      fi
      dash
      continue
    fi

    if [[ "$message" = "/share" ]]; then
      call "$BASE_URL/conversations/collaboration/stop" --data '{"conversation_id":'"$CONVERSATION_ID"'}' >/dev/null
      echo https://eastagile.skydeck.ai/conversation/$(
        call "$BASE_URL/conversations/collaboration/start" --data '{"conversation_id":'"$CONVERSATION_ID"'}' |
          jq -r '.data.collaboration_slug'
      )
      dash
      continue
    fi

    if [[ "$message" = "/colab" ]]; then
      call "$BASE_URL/conversations/$CONVERSATION_ID/create_snapshot" --data '{"anonymize":"false"}' | jq -r '.url'
      dash
      continue
    fi

    if [[ "$message" = "/view" ]]; then
      nvim -R $CURRENT_RESPONSE_FILE
      dash
      continue
    fi

    if [[ "$message" = "/viewdiff" ]]; then
      cat $CURRENT_RESPONSE_FILE | sed -n '/^```diff$/,/^```$/p' | sed '/^```/d' | nvim -R -
      dash
      continue
    fi

    if [[ "$message" = "/clear" ]]; then
      clear
      continue
    fi

    # local aicommand=$(cat $CURRENT_RESPONSE_FILE | sed -n '/^```agentexecute$/,/^```$/p' | sed '/^```/d')
    # [[ -n $aicommand ]] && message=$(eval $aicommand)

    dash

    spinner &
    spinner_id=$!

    read CONVERSATION_ID ASSI_MESSAGE_ID < <(
      post_user_message "$message" "$post_ext" |
        jq -r '[.data.conversation_id, .data.messages[-1].id] | join(" ")'
    )
    [[ ! -z "$conversation_title" ]] && {
      patch_conversation "$conversation_title" &
      conversation_title=""
    }

    kill $spinner_id 2>/dev/null
    wait $! 2>/dev/null
    echo -ne '\r   \r'

    trap stop_response_stream SIGINT

    printf "$BG($MODEL_NAME)$CLR\n"
    get_response_stream
    echo

    trap - SIGINT
    dash
  done
}

one_time_prompt() {
  message=$(aidd "$@") || fail "No such aidd template: $1"

  # setting conversation title using prefix [[ on first line
  local first_line=$(echo "$message" | head -n 1)
  if [[ "$first_line" =~ ^\[\[ ]]; then
    conversation_title=${first_line#* }
    message=$(echo "$message" | tail -n +2)
  fi

  read CONVERSATION_ID ASSI_MESSAGE_ID < <(
    post_user_message "$message" |
      jq -r '[.data.conversation_id, .data.messages[-1].id] | join(" ")'
  )
  [[ ! -z "$conversation_title" ]] && patch_conversation "$conversation_title" &

  get_response_stream
}

usage() {
  echo "Usage: $(basename $0) [chat | continue | delete | patch | query-models | count-conv | read-cont]"
  exit 1
}

main() {
  [[ "$#" -lt 1 ]] && usage

  case "$1" in
  c | chat)
    start_chat_session
    ;;
  pc | pick-chat)
    pick_model
    start_chat_session
    ;;
  cont | continue)
    CONVERSATION_ID=$(pick_conversation_id) || abort "No conversation selected"
    start_chat_session
    ;;
  d | delete)
    CONVERSATION_ID=$(pick_conversation_id) || abort "No conversation selected"
    delete_conversation
    invalidate_cache
    ;;
  p | patch)
    CONVERSATION_ID=$(pick_conversation_id) || abort "No conversation selected"
    read -p "Enter new name: " name
    patch_conversation $name &
    ;;
  read-cont)
    CONVERSATION_ID=$(pick_conversation_id) || abort "No conversation selected"
    get_conversation_history
    start_chat_session
    ;;
  query-models)
    call "$BASE_URL/models/" | jq -r '.[] | [ .id, .name, .context_window ] | @tsv' | column -t -s $'\t' | sort -u -k2
    ;;
  count-conv)
    count_messages
    ;;
  count-dollars)
    count_dollars_spent
    ;;
  *)
    one_time_prompt "$@"
    ;;
  esac
}

pick_model $([ -t 0 ] && echo "37-sonnet" || echo "gem-2-flash-lite-thinking")

main "$@"
